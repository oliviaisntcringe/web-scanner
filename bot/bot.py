from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio  # For async operations
import os
import json
import logging
import datetime
import threading
import time
import traceback  # –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫ –æ—à–∏–±–æ–∫

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_directory = "logs"
os.makedirs(log_directory, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
current_date = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
log_file = os.path.join(log_directory, f"bot_log_{current_date}.log")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("web_scanner_bot")
logger.setLevel(logging.INFO)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler(log_file, encoding='utf-8')
file_handler.setLevel(logging.INFO)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
logger.info("===== –í–µ–± —Å–∫–∞–Ω–Ω–µ—Ä —Å Telegram –±–æ—Ç–æ–º –∑–∞–ø—É—â–µ–Ω =====")
logger.info(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_file}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from ml_models.predictor import predict_vulnerabilities
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤–µ–±-–∫—Ä–∞—É–ª–µ—Ä–∞
from crawler_scan import CrawlerScanner
from bot.target_info import get_target_info, format_target_info
from bot.bruteforce import bruteforce_target, format_brute_results, format_progress_message, get_last_update_time
from service_scanner import ServiceScanner, scan_services, format_scan_results

# Replace 'YOUR_TELEGRAM_BOT_TOKEN' with your actual bot token
TELEGRAM_BOT_TOKEN = '7800982906:AAFBX07MCeJC30fXFjrb1ry-9rAF35ZhopI'
# Optional: Add a list of authorized user IDs
# AUTHORIZED_USERS = [123456789, 987654321] 

logger.info(f"Telegram Bot Token: {TELEGRAM_BOT_TOKEN[:5]}...{TELEGRAM_BOT_TOKEN[-5:]}")

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
progress_data = {
    "crawling": 0,
    "scanning": 0,
    "status": "waiting"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
def update_progress(stage, percent):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    global progress_data
    if stage == "crawling":
        progress_data["crawling"] = percent
        progress_data["status"] = "crawling"
    elif stage == "scanning":
        progress_data["scanning"] = percent
        progress_data["status"] = "scanning"
    logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å {stage}: {percent}%")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
def format_progress_message():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
    status = progress_data["status"]
    crawling = progress_data["crawling"]
    scanning = progress_data["scanning"]
    
    message = "\n------------------ –ü–†–û–ì–†–ï–°–° ------------------\n"
    
    if status == "waiting":
        message += "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π...\n"
    elif status == "crawling":
        message += f"üï∏Ô∏è –ö—Ä–∞—É–ª–∏–Ω–≥: {crawling}% {'‚ñì' * int(crawling/5)}{'‚ñë' * (20-int(crawling/5))}\n"
        message += f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ...\n"
    elif status == "scanning":
        message += f"üï∏Ô∏è –ö—Ä–∞—É–ª–∏–Ω–≥: 100% ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)\n"
        message += f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {scanning}% {'‚ñì' * int(scanning/5)}{'‚ñë' * (20-int(scanning/5))}\n"
    elif status == "completed":
        message += f"üï∏Ô∏è –ö—Ä–∞—É–ª–∏–Ω–≥: 100% ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)\n"
        message += f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: 100% ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)\n"
    
    return message

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async def progress_updater(update, context, message_id, max_time=300, target_url=None):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –∏–∑ Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        max_time: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        target_url: URL —Ü–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    global progress_data
    start_time = time.time()
    last_progress = ""
    import html
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    url_display = ""
    if target_url:
        url_display = f" –¥–ª—è {html.escape(target_url)}"
    
    try:
        while time.time() - start_time < max_time and progress_data["status"] != "completed":
            current_progress = format_progress_message()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if current_progress != last_progress:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=message_id,
                        text=f"‚öôÔ∏è <b>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è{url_display}...</b>{current_progress}",
                        parse_mode="HTML"
                    )
                    last_progress = current_progress
                except Exception as edit_error:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É MessageToEditNotFound –∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º,
                    # –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                    if "message to edit not found" in str(edit_error).lower():
                        try:
                            new_message = await update.effective_chat.send_message(
                                text=f"‚öôÔ∏è <b>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è{url_display}...</b>{current_progress}",
                                parse_mode="HTML"
                            )
                            # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                            message_id = new_message.message_id
                            last_progress = current_progress
                            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (ID: {message_id})")
                        except Exception as send_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: {send_error}")
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                            return
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        continue
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –∑–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ main
async def full_scan_pipeline(target_url, exploit_mode=False):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.
    
    Args:
        target_url (str): URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        exploit_mode (bool): –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ–º—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {target_url} (—Ä–µ–∂–∏–º —ç–∫—Å–ø–ª–æ–π—Ç–∞: {exploit_mode})")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        import requests
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {target_url}")
        response = requests.get(target_url, timeout=10)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {target_url}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        site_data = {
            "url": target_url,
            "content": response.text,
            "headers": dict(response.headers)
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {target_url}")
        vulnerabilities = predict_vulnerabilities(site_data)
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        
        # –í —Ä–µ–∂–∏–º–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ–± —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
        if exploit_mode and vulnerabilities:
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –¥–ª—è {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            for vuln in vulnerabilities:
                if 'type' in vuln:
                    vuln_type = vuln['type'].lower()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                    if 'xss' in vuln_type:
                        vuln['exploit_details'] = f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–Ω–µ–¥—Ä–∏—Ç—å: <script>alert('XSS')</script>"
                    elif 'sqli' in vuln_type:
                        vuln['exploit_details'] = f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–Ω–µ–¥—Ä–∏—Ç—å: ' OR '1'='1"
                    elif 'rce' in vuln_type:
                        vuln['exploit_details'] = f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: ; ls -la"
                    elif 'lfi' in vuln_type:
                        vuln['exploit_details'] = f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—É—Ç—å: ../../../etc/passwd"
                    else:
                        vuln['exploit_details'] = f"–£—è–∑–≤–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑."
                    
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –¥–ª—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–∞ {vuln_type}")
        
        return vulnerabilities
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {target_url}: {e}")
        import traceback
        error_trace = traceback.format_exc()
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\n{error_trace}")
        return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a welcome message when the /start command is issued."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    # Optional: Check if user is authorized
    # if AUTHORIZED_USERS and user.id not in AUTHORIZED_USERS:
    #     await update.message.reply_text("Sorry, you are not authorized to use this bot.")
    #     return
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ /scan [url/ip] - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n"
        f"‚Ä¢ /exp [url/ip] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ–º—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏\n"
        f"‚Ä¢ /crawl [url] - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∫—Ä–∞—É–ª–µ—Ä –∏ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å —Å–∞–π—Ç\n"
        f"‚Ä¢ /target_info [url] - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏\n"
        f"‚Ä¢ /brute [url] [login (optional)] - –ü–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª—è admin\n"
        f"‚Ä¢ /vuln [ip/domain] [ports] - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –∏ –∏—Å–∫–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏\n"
        f"‚Ä¢ /exploit_vuln [ip/domain] [vuln_number] - –≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å\n\n"
        f"–ü—Ä–∏–º–µ—Ä: /scan https://example.com"
    )

def format_results_for_telegram(results, url, is_exploit=False):
    """Formats the scan results for a Telegram message in Russian."""
    import html
    
    if not results:
        return f"–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è <code>{url}</code>."

    if is_exploit:
        message = f"<b>üî¥ –ê–ù–ê–õ–ò–ó –≠–ö–°–ü–õ–û–ô–¢–û–í –î–õ–Ø {url}</b>\n\n"
    else:
        message = f"<b>üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø {url}</b>\n\n"
    
    for vuln in results:
        # Truncate details if too long for a Telegram message
        details_snippet = vuln.get('details', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')[:500]
        # Escape HTML to prevent Telegram parser errors
        escaped_details = html.escape(details_snippet)
        
        message += f"<b>–¢–∏–ø:</b> {html.escape(vuln.get('type', '–ù/–î'))}\n"
        message += f"<b>–î–µ—Ç–∞–ª–∏:</b> <code>{escaped_details}</code>\n"
        
        # Add severity if available
        if 'severity' in vuln:
            severity = vuln['severity']
            severity_icon = "üî¥" if severity == "high" else "üü†" if severity == "medium" else "üü°"
            severity_text = "–í–´–°–û–ö–ê–Ø" if severity == "high" else "–°–†–ï–î–ù–Ø–Ø" if severity == "medium" else "–ù–ò–ó–ö–ê–Ø"
            message += f"<b>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</b> {severity_icon} {severity_text}\n"
            
        # Add exploit details if in exploit mode
        if is_exploit and 'exploit_details' in vuln:
            exploit_details = html.escape(vuln['exploit_details'])
            message += f"<b>–≠–∫—Å–ø–ª–æ–π—Ç:</b> <pre>{exploit_details}</pre>\n"
        
        message += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    
    # Telegram message length limit is 4096 characters
    if len(message) > 4096:
        message = message[:4076] + "\n... (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∫—Ä–∞—â–µ–Ω—ã)"
    return message

def create_obsidian_report(results, url, crawler_results=None, is_exploit=False):
    """
    –°–æ–∑–¥–∞–µ—Ç HTML-–æ—Ç—á–µ—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Obsidian.
    
    Args:
        results (list): –°–ø–∏—Å–æ–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        url (str): URL —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        crawler_results (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∞—É–ª–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        is_exploit (bool): –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
    
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É HTML-—Ñ–∞–π–ª—É
    """
    import datetime
    import os
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    reports_dir = "reports"
    os.makedirs(reports_dir, exist_ok=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    safe_url = url.replace("http://", "").replace("https://", "").replace("/", "_").replace(":", "_")
    if len(safe_url) > 30:
        safe_url = safe_url[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    
    file_name = f"{reports_dir}/scan_{safe_url}_{timestamp}.html"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    if is_exploit:
        title = f"–ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –¥–ª—è {url}"
    else:
        title = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {url}"
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å HTML
    html_content = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }}
        h1, h2, h3 {{
            color: #2c3e50;
        }}
        .vulnerability {{
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
            background-color: #f9f9f9;
        }}
        .high {{
            border-left: 5px solid #e74c3c;
        }}
        .medium {{
            border-left: 5px solid #f39c12;
        }}
        .low {{
            border-left: 5px solid #f1c40f;
        }}
        .details {{
            background-color: #eee;
            padding: 10px;
            border-radius: 3px;
            font-family: monospace;
            white-space: pre-wrap;
        }}
        .exploit {{
            background-color: #ffe6e6;
            padding: 10px;
            border-radius: 3px;
            font-family: monospace;
            white-space: pre-wrap;
        }}
        .summary {{
            background-color: #e8f4f8;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }}
        th, td {{
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
    </style>
</head>
<body>
    <h1>{title}</h1>
    <p>–î–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}</p>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫—Ä–∞—É–ª–∏–Ω–≥—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if crawler_results:
        html_content += f"""
    <div class="summary">
        <h2>–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—Ö–æ–¥—É —Å–∞–π—Ç–∞</h2>
        <ul>
            <li>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(crawler_results['pages'])}</li>
            <li>–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(crawler_results['files'])}</li>
            <li>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(crawler_results['directories'])}</li>
            <li><strong>–ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(results)}</strong></li>
        </ul>
    </div>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
    if not results:
        html_content += "<p>–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>"
    else:
        html_content += f"<h2>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ ({len(results)})</h2>"
        
        for i, vuln in enumerate(results):
            vuln_type = vuln.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            details = vuln.get('details', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')
            severity = vuln.get('severity', 'low')
            severity_class = severity
            severity_text = "–í–´–°–û–ö–ê–Ø" if severity == "high" else "–°–†–ï–î–ù–Ø–Ø" if severity == "medium" else "–ù–ò–ó–ö–ê–Ø"
            
            html_content += f"""
    <div class="vulnerability {severity_class}">
        <h3>#{i+1}: {vuln_type}</h3>
        <p><strong>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</strong> {severity_text}</p>
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ —ç—Ç–æ –∏–∑ –∫—Ä–∞—É–ª–∏–Ω–≥–∞
            if 'page_url' in vuln:
                html_content += f'        <p><strong>URL:</strong> <a href="{vuln["page_url"]}" target="_blank">{vuln["page_url"]}</a></p>\n'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
            html_content += f"""
        <p><strong>–î–µ—Ç–∞–ª–∏:</strong></p>
        <div class="details">{details}</div>
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç–∫—Å–ø–ª–æ–π—Ç—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if is_exploit and 'exploit_details' in vuln:
                html_content += f"""
        <p><strong>–≠–∫—Å–ø–ª–æ–π—Ç:</strong></p>
        <div class="exploit">{vuln['exploit_details']}</div>
"""
            
            html_content += "    </div>\n"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∞—É–ª–∏–Ω–≥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
    if crawler_results:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        if crawler_results['directories']:
            html_content += """
    <h2>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏</h2>
    <table>
        <tr>
            <th>#</th>
            <th>URL</th>
            <th>–ü—É—Ç—å</th>
        </tr>
"""
            for i, directory in enumerate(crawler_results['directories'][:50]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                html_content += f"""
        <tr>
            <td>{i+1}</td>
            <td><a href="{directory['url']}" target="_blank">{directory['url']}</a></td>
            <td>{directory.get('path', '–ù/–î')}</td>
        </tr>
"""
            
            if len(crawler_results['directories']) > 50:
                html_content += f"""
        <tr>
            <td colspan="3">... –∏ –µ—â–µ {len(crawler_results['directories']) - 50} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π</td>
        </tr>
"""
                
            html_content += "    </table>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if crawler_results['files']:
            html_content += """
    <h2>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</h2>
    <table>
        <tr>
            <th>#</th>
            <th>URL</th>
            <th>–¢–∏–ø</th>
            <th>–†–∞–∑–º–µ—Ä</th>
        </tr>
"""
            for i, file in enumerate(crawler_results['files'][:50]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                file_type = file.get('content_type', file.get('extension', '–ù/–î'))
                file_size = f"{file.get('size', 0) / 1024:.1f} KB" if 'size' in file else '–ù/–î'
                
                html_content += f"""
        <tr>
            <td>{i+1}</td>
            <td><a href="{file['url']}" target="_blank">{file['url']}</a></td>
            <td>{file_type}</td>
            <td>{file_size}</td>
        </tr>
"""
            
            if len(crawler_results['files']) > 50:
                html_content += f"""
        <tr>
            <td colspan="4">... –∏ –µ—â–µ {len(crawler_results['files']) - 50} —Ñ–∞–π–ª–æ–≤</td>
        </tr>
"""
                
            html_content += "    </table>\n"
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º HTML
    html_content += """
</body>
</html>
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º HTML –≤ —Ñ–∞–π–ª
    with open(file_name, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    logger.info(f"–û—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML –¥–ª—è Obsidian —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_name}")
    return file_name

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles incoming messages (expected to be URLs)."""
    import html
    user = update.effective_user
    url_to_scan = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {url_to_scan}")
    
    # Basic URL validation (very simple)
    if not (url_to_scan.startswith('http://') or url_to_scan.startswith('https://')):
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: {url_to_scan}")
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://"
        )
        return

    # Escape URL for display
    escaped_url = html.escape(url_to_scan)
    await update.message.reply_text(f"–ü–æ–ª—É—á–µ–Ω URL: {escaped_url}. –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(f"–ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è URL: {url_to_scan}")
        results = await full_scan_pipeline(url_to_scan)
        
        formatted_message = format_results_for_telegram(results, url_to_scan)
        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL {url_to_scan} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(results)}")
        await update.message.reply_html(formatted_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {url_to_scan}: {e}")
        await update.message.reply_text(f"Sorry, an error occurred while scanning {url_to_scan}. Please try again later.")

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /scan command with an optional URL/IP parameter."""
    import html
    user = update.effective_user
    
    # Check if a URL/IP was provided as an argument
    if context.args and len(context.args) > 0:
        target = context.args[0].strip()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /scan –¥–ª—è {target}")
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ —É–∫–∞–∑–∞–ª URL –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /scan")
        await update.message.reply_html(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –∏–ª–∏ IP-–∞–¥—Ä–µ—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/scan https://example.com</code> –∏–ª–∏ <code>/scan 192.168.1.1</code>"
        )
        return
    
    # Add http:// prefix if missing and not an IP address format
    if not (target.startswith('http://') or target.startswith('https://')):
        # Very basic IP check - improve this in production
        if not all(part.isdigit() and 0 <= int(part) <= 255 for part in target.split('.') if part.isdigit()):
            target = 'http://' + target
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å http:// –∫ URL: {target}")
    
    # Escape URL for HTML display
    escaped_target = html.escape(target)
    await update.message.reply_html(f"–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è <code>{escaped_target}</code>...\n‚è≥ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è</i>")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(f"–ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è URL: {target}")
        results = await full_scan_pipeline(target)
        formatted_message = format_results_for_telegram(results, target)
        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL {target} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(results)}")
        
        # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç –¥–ª—è Obsidian
        html_report = create_obsidian_report(results, target)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
        await update.message.reply_html(formatted_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –æ—Ç—á–µ—Ç
        if results:
            with open(html_report, 'rb') as doc:
                await update.message.reply_document(
                    document=doc,
                    filename=os.path.basename(html_report),
                    caption="–û—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML –¥–ª—è Obsidian"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {target}: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å <code>{target}</code>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def exploit_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /exp command to exploit vulnerabilities."""
    import html
    from exploiter import exploit_target, WebExploiter
    
    user = update.effective_user
    
    # Check if a URL/IP was provided as an argument
    if context.args and len(context.args) > 0:
        target = context.args[0].strip()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /exp –¥–ª—è {target}")
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ —É–∫–∞–∑–∞–ª URL –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /exp")
        await update.message.reply_html(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –∏–ª–∏ IP-–∞–¥—Ä–µ—Å –¥–ª—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/exp https://example.com</code> –∏–ª–∏ <code>/exp 192.168.1.1</code>"
        )
        return
    
    # Add http:// prefix if missing and not an IP address format
    if not (target.startswith('http://') or target.startswith('https://')):
        # Very basic IP check - improve this in production
        if not all(part.isdigit() and 0 <= int(part) <= 255 for part in target.split('.') if part.isdigit()):
            target = 'http://' + target
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å http:// –∫ URL: {target}")
    
    # Escape URL for HTML display
    escaped_target = html.escape(target)
    progress_message = await update.message.reply_html(
        f"‚ö†Ô∏è <b>–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è <code>{escaped_target}</code>...</b>\n"
        f"‚è≥ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è</i>\n\n"
        f"üîç <i>–í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</i>\n"
        f"‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL-–∏–Ω—ä–µ–∫—Ü–∏–π\n"
        f"‚Ä¢ –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è XSS-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n"
        f"‚Ä¢ –ü–æ–∏—Å–∫ –∏ –≤–∑–ª–æ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–µ–π"
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        logger.info(f"–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è URL: {target}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ HTML-–æ—Ç—á–µ—Ç–∞
        messages, html_report = exploit_target(target)
        
        logger.info(f"–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è URL {target} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è HTML-–æ—Ç—á–µ—Ç–∞
        import tempfile
        import os
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("reports", exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏ –≤—Ä–µ–º–µ–Ω–∏
        domain = target.replace("http://", "").replace("https://", "").split("/")[0]
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"reports/{domain}_{timestamp}.html"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML-–æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        with open(report_filename, "w", encoding="utf-8") as f:
            f.write(html_report)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        if isinstance(messages, list) and messages:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await progress_message.edit_text(
                text=messages[0],
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            for msg in messages[1:]:
                await update.message.reply_html(msg)
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await progress_message.edit_text(
                text=messages[0] if isinstance(messages, list) and messages else "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                parse_mode="HTML"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –æ—Ç—á–µ—Ç
        with open(report_filename, 'rb') as doc:
            await update.message.reply_document(
                document=doc,
                filename=os.path.basename(report_filename),
                caption=f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è {escaped_target}"
            )
            logger.info(f"HTML-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_filename} –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è {target}: {e}")
        await progress_message.edit_text(
            text=f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è <code>{target}</code>. –û—à–∏–±–∫–∞: {str(e)}",
            parse_mode="HTML"
        )

async def crawl_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /crawl command to crawl and scan an entire website."""
    global progress_data
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_data = {
        "crawling": 0,
        "scanning": 0,
        "status": "waiting"
    }
    
    user = update.effective_user
    
    # Check if a URL was provided as an argument
    if context.args and len(context.args) > 0:
        target = context.args[0].strip()
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫—Ä–∞—É–ª–µ—Ä–∞
        max_urls = 50  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫—Å–∏–º—É–º 50 URL
        max_depth = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–ª—É–±–∏–Ω–∞ 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω—ã –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if len(context.args) > 1:
            try:
                max_urls = int(context.args[1])
            except ValueError:
                pass
                
        if len(context.args) > 2:
            try:
                max_depth = int(context.args[2])
            except ValueError:
                pass
                
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /crawl –¥–ª—è {target} —Å max_urls={max_urls}, max_depth={max_depth}")
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ —É–∫–∞–∑–∞–ª URL –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /crawl")
        await update.message.reply_html(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/crawl https://example.com [–º–∞–∫—Å_urls] [–º–∞–∫—Å_–≥–ª—É–±–∏–Ω–∞]</code>\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –º–∞–∫—Å_urls=50, –º–∞–∫—Å_–≥–ª—É–±–∏–Ω–∞=2"
        )
        return
    
    # Add http:// prefix if missing
    if not (target.startswith('http://') or target.startswith('https://')):
        target = 'http://' + target
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å http:// –∫ URL: {target}")
    
    # Escape URL for display and send initial progress message
    import html
    escaped_target = html.escape(target)
    progress_message = await update.message.reply_html(
        f"‚öôÔ∏è <b>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è {escaped_target}...</b>{format_progress_message()}"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_task = asyncio.create_task(
        progress_updater(update, context, progress_message.message_id, target_url=target)
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        def update_crawl_progress(percent):
            update_progress("crawling", percent)
            
        def update_scan_progress(percent):
            update_progress("scanning", percent)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä
        logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-–∫—Ä–∞—É–ª–µ—Ä–∞ –¥–ª—è URL: {target}")
        scanner = CrawlerScanner(
            target, 
            max_urls=max_urls,
            max_depth=max_depth,
            delay=0.5,
            thread_count=5,
            timeout=10,
            follow_subdomain=False,
            progress_callback=update_crawl_progress,
            scan_progress_callback=update_scan_progress
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–ª–±—ç–∫–∞–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        crawler_file, vulns_file = scanner.run_full_scan("./scan_results")
        progress_data["status"] = "completed"  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        
        # –ñ–¥–µ–º, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±—ã–ª–æ –≤–∏–¥–Ω–æ
        await asyncio.sleep(2)
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if not progress_task.done():
            progress_task.cancel()
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        logger.info(f"–ö—Ä–∞—É–ª–∏–Ω–≥ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {crawler_file} –∏ {vulns_file}")
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
        with open(crawler_file, 'r', encoding='utf-8') as f:
            crawler_results = json.load(f)
        
        with open(vulns_file, 'r', encoding='utf-8') as f:
            vuln_results = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç –¥–ª—è Obsidian
        html_report = create_obsidian_report(vuln_results, target, crawler_results)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        import html
        escaped_target = html.escape(target)
        summary = (
            f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ö–æ–¥–∞ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {escaped_target}</b>\n\n"
            f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(crawler_results['pages'])}\n"
            f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(crawler_results['files'])}\n"
            f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(crawler_results['directories'])}\n"
            f"‚Ä¢ <b>–ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(vuln_results)}</b>\n\n"
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∞—É–ª–∏–Ω–≥–∞ –¥–ª—è {target}: "
                   f"—Å—Ç—Ä–∞–Ω–∏—Ü: {len(crawler_results['pages'])}, "
                   f"—Ñ–∞–π–ª–æ–≤: {len(crawler_results['files'])}, "
                   f"–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(crawler_results['directories'])}, "
                   f"—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(vuln_results)}")
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if vuln_results:
            import html
            summary += "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:</b>\n"
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            for i, vuln in enumerate(vuln_results[:5]):
                vuln_type = html.escape(vuln.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                severity = vuln.get('severity', 'unknown')
                severity_icon = "üî¥" if severity == "high" else "üü†" if severity == "medium" else "üü°"
                url = html.escape(vuln.get('page_url', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL'))
                summary += f"{i+1}. {severity_icon} {vuln_type} –Ω–∞ {url}\n"
                logger.info(f"–£—è–∑–≤–∏–º–æ—Å—Ç—å #{i+1}: {severity} {vuln_type} –Ω–∞ {url}")
            
            if len(vuln_results) > 5:
                summary += f"... –∏ –µ—â–µ {len(vuln_results) - 5} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n\n"
                
            summary += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/scan {–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π_url}</code> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."
        
        await update.message.reply_html(summary)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        with open(crawler_file, 'rb') as doc:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—Ä–∞—É–ª–∏–Ω–≥–∞: {crawler_file}")
            await update.message.reply_document(
                document=doc,
                filename=os.path.basename(crawler_file),
                caption="–ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ö–æ–¥–∞ —Å–∞–π—Ç–∞ (JSON)"
            )
        
        if vuln_results:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            with open(vulns_file, 'rb') as doc:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {vulns_file}")
                await update.message.reply_document(
                    document=doc,
                    filename=os.path.basename(vulns_file),
                    caption="–ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (JSON)"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML-–æ—Ç—á–µ—Ç –¥–ª—è Obsidian
            with open(html_report, 'rb') as doc:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ HTML-–æ—Ç—á–µ—Ç–∞ –¥–ª—è Obsidian: {html_report}")
                await update.message.reply_document(
                    document=doc,
                    filename=os.path.basename(html_report),
                    caption="–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML –¥–ª—è Obsidian"
                )
            
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if not progress_task.done():
            progress_task.cancel()
            
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–∞—É–ª–∏–Ω–≥–µ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {target}: {error_msg}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ö–æ–¥ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ <code>{target}</code>. –û—à–∏–±–∫–∞: {error_msg}")

async def target_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /target_info command with a URL argument."""
    import html
    user = update.effective_user
    if context.args and len(context.args) > 0:
        target = context.args[0].strip()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /target_info –¥–ª—è {target}")
    else:
        await update.message.reply_html(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/target_info https://example.com</code>"
        )
        return
    if not (target.startswith('http://') or target.startswith('https://')):
        target = 'http://' + target
    await update.message.reply_html(f"–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏ <code>{html.escape(target)}</code>...\n‚è≥ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</i>")
    try:
        info = get_target_info(target)
        msg = format_target_info(info)
        await update.message.reply_html(msg)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏ {target}: {e}")
        await update.message.reply_html(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏: {e}")

async def brute_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /brute command: /brute [url] [login (optional)] [limit (optional)]"""
    import html
    import asyncio
    import time
    import threading
    from bot.bruteforce import bruteforce_target, format_brute_results, format_progress_message, get_last_update_time
    
    user = update.effective_user
    if context.args and len(context.args) > 0:
        target = context.args[0].strip()
        login = context.args[1].strip() if len(context.args) > 1 else 'admin'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–∞—Ä–æ–ª–µ–π
        password_limit = None
        if len(context.args) > 2:
            try:
                password_limit = int(context.args[2].strip())
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –ø–∞—Ä–æ–ª–µ–π: {password_limit}")
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞ –ø–∞—Ä–æ–ª–µ–π: {context.args[2]}")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /brute –¥–ª—è {target} —Å –ª–æ–≥–∏–Ω–æ–º {login}, –ª–∏–º–∏—Ç: {password_limit}")
    else:
        await update.message.reply_html(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/brute https://example.com/admin</code> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–Ω admin –∏ –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å\n"
            "<code>/brute https://example.com/admin user1</code> - —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω user1\n"
            "<code>/brute https://example.com/admin user1 5000</code> - —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω user1 –∏ –ª–∏–º–∏—Ç 5000 –ø–∞—Ä–æ–ª–µ–π"
        )
        return
        
    if not (target.startswith('http://') or target.startswith('https://')):
        target = 'http://' + target
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    message = await update.message.reply_html(
        f"<b>üîë –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –¥–ª—è {html.escape(target)}</b> (–ª–æ–≥–∏–Ω: <b>{html.escape(login)}</b>)...\n"
        f"‚è≥ <i>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞...</i>"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª–∏ –∏–∑ pass.txt
    import os
    dict_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'dict')
    passlist_path = os.path.join(dict_dir, 'pass.txt')
    
    if not os.path.exists(passlist_path):
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª dict/pass.txt. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª–∏.",
            parse_mode='HTML'
        )
        return
    
    # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
    results = []
    bruteforce_complete = False
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    async def update_progress_message():
        last_message = ""
        last_update = 0
        
        while not bruteforce_complete:
            try:
                current_time = get_last_update_time()
                if current_time > last_update:
                    last_update = current_time
                    progress_text = format_progress_message()
                    
                    if progress_text != last_message:
                        last_message = progress_text
                        await message.edit_text(
                            f"<b>üîë –ë—Ä—É—Ç—Ñ–æ—Ä—Å –¥–ª—è {html.escape(target)}</b> (–ª–æ–≥–∏–Ω: <b>{html.escape(login)}</b>)\n\n{progress_text}",
                            parse_mode='HTML'
                        )
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: {progress_text[:50]}...")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            
            await asyncio.sleep(2)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def perform_bruteforce():
        nonlocal results, bruteforce_complete
        try:
            # Basic auth –±—Ä—É—Ç—Ñ–æ—Ä—Å
            logger.info(f"–ó–∞–ø—É—Å–∫ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ basic –¥–ª—è {target}")
            basic_results = bruteforce_target(target, mode='basic', username=login, password_limit=password_limit)
            results.extend(basic_results)
            
            # Form –±—Ä—É—Ç—Ñ–æ—Ä—Å
            logger.info(f"–ó–∞–ø—É—Å–∫ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ form –¥–ª—è {target}")
            form_results = bruteforce_target(target, mode='form', username=login, password_limit=password_limit)
            results.extend(form_results)
            
            logger.info(f"–ë—Ä—É—Ç—Ñ–æ—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ: {len(results)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞: {e}")
        finally:
            bruteforce_complete = True
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_task = asyncio.create_task(update_progress_message())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä—É—Ç—Ñ–æ—Ä—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        brute_thread = threading.Thread(target=perform_bruteforce)
        brute_thread.daemon = True  # –î–µ–ª–∞–µ–º –ø–æ—Ç–æ–∫ –¥–µ–º–æ–Ω–æ–º, —á—Ç–æ–±—ã –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        brute_thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞ (30 –º–∏–Ω—É—Ç)
        timeout = 30 * 60  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        start_time = time.time()
        
        while not bruteforce_complete and time.time() - start_time < timeout:
            await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å –ø–æ —Ç–∞–π–º–∞—É—Ç—É
        if not bruteforce_complete:
            logger.warning(f"–ë—Ä—É—Ç—Ñ–æ—Ä—Å –¥–ª—è {target} –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
            bruteforce_complete = True
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await progress_task
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        filtered_results = [r for r in results if r['username'] == login]
        result_message = format_brute_results(filtered_results)
        
        await message.edit_text(
            f"<b>üîë –ó–∞–≤–µ—Ä—à–µ–Ω –±—Ä—É—Ç—Ñ–æ—Ä—Å –¥–ª—è {html.escape(target)}</b> (–ª–æ–≥–∏–Ω: <b>{html.escape(login)}</b>)\n\n{result_message}",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}")
        bruteforce_complete = True

async def vuln_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /vuln command to scan services and find vulnerabilities in IP address"""
    import html
    import asyncio
    import time
    import threading
    from service_scanner import ServiceScanner
    
    user = update.effective_user
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω IP –∞–¥—Ä–µ—Å
    if context.args and len(context.args) > 0:
        target = context.args[0].strip()
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—ã
        ports = DEFAULT_PORTS = "21-23,25,53,80,110,111,135,139,143,443,445,993,995,1723,3306,3389,5900,8080,8443"
        if len(context.args) > 1:
            ports = context.args[1].strip()
            
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /vuln –¥–ª—è {target} —Å –ø–æ—Ä—Ç–∞–º–∏ {ports}")
    else:
        await update.message.reply_html(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/vuln 192.168.1.1</code> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã\n"
            "<code>/vuln example.com</code> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω\n"
            "<code>/vuln 10.0.0.1 80,443,8080</code> - —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    message = await update.message.reply_html(
        f"<b>üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è {html.escape(target)}</b>...\n\n"
        f"‚è≥ <i>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>\n\n"
        f"<b>–°–∫–∞–Ω–∏—Ä—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã:</b> <code>{html.escape(ports)}</code>"
    )
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    scan_results = {}
    scan_complete = False
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    async def update_progress_message():
        dots = 0
        while not scan_complete:
            try:
                dots = (dots % 3) + 1
                await message.edit_text(
                    f"<b>üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è {html.escape(target)}</b>...\n\n"
                    f"‚è≥ <i>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è{dots * '.'}</i>\n\n"
                    f"<b>–°–∫–∞–Ω–∏—Ä—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã:</b> <code>{html.escape(ports)}</code>",
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            
            await asyncio.sleep(2)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def perform_scanning():
        nonlocal scan_results, scan_complete
        try:
            scanner = ServiceScanner(target)
            scan_results = scanner.scan_and_analyze(ports=ports)
            logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {target} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(scan_results.get('vulnerabilities', []))}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            scan_results = {"error": str(e)}
        finally:
            scan_complete = True
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_task = asyncio.create_task(update_progress_message())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scan_thread = threading.Thread(target=perform_scanning)
        scan_thread.daemon = True
        scan_thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞ (10 –º–∏–Ω—É—Ç)
        timeout = 10 * 60  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        start_time = time.time()
        
        while not scan_complete and time.time() - start_time < timeout:
            await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
        if not scan_complete:
            logger.warning(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {target} –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
            scan_complete = True
            scan_results = {"error": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É (10 –º–∏–Ω—É—Ç)"}
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_task.cancel()
        try:
            await progress_task
        except asyncio.CancelledError:
            pass
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        scanner = ServiceScanner(target)
        scanner.results = scan_results
        result_message = scanner.format_results_for_telegram()
        
        await message.edit_text(
            result_message,
            parse_mode='HTML'
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏ —ç–∫—Å–ø–ª–æ–π—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é
        if scan_results.get("vulnerabilities") and scan_results.get("exploits"):
            await update.message.reply_html(
                "<b>üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã —ç–∫—Å–ø–ª–æ–π—Ç—ã!</b>\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏?\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/exploit_vuln " + target + " [–Ω–æ–º–µ—Ä_—É—è–∑–≤–∏–º–æ—Å—Ç–∏]</code>"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}")
        scan_complete = True

async def exploit_vuln_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /exploit_vuln command to exploit discovered vulnerabilities"""
    import html
    import asyncio
    import time
    import threading
    from service_scanner import ServiceScanner
    
    user = update.effective_user
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if context.args and len(context.args) >= 2:
        target = context.args[0].strip()
        try:
            vuln_index = int(context.args[1]) - 1  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            if vuln_index < 0:
                raise ValueError("–ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /exploit_vuln –¥–ª—è {target}, —É—è–∑–≤–∏–º–æ—Å—Ç—å #{vuln_index+1}")
        except ValueError:
            await update.message.reply_html(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–æ–º–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/exploit_vuln 192.168.1.1 1</code>"
            )
            return
    else:
        await update.message.reply_html(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å/–¥–æ–º–µ–Ω –∏ –Ω–æ–º–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/exploit_vuln 192.168.1.1 1</code> - —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å\n"
            "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π <code>/vuln</code>"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await update.message.reply_html(
        f"<b>üî• –ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ #{vuln_index+1} –Ω–∞ {html.escape(target)}</b>...\n\n"
        f"‚è≥ <i>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –ø–æ–∏—Å–∫ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤...</i>"
    )
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    exploit_results = {}
    exploit_complete = False
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    async def update_progress_message():
        stages = [
            "–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö",
            "–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –∞—Ç–∞–∫–∏",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–∞",
            "–ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        ]
        
        current_stage = 0
        dots = 0
        
        while not exploit_complete:
            try:
                dots = (dots % 3) + 1
                
                # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏
                if dots == 1:
                    current_stage = (current_stage + 1) % len(stages)
                
                await message.edit_text(
                    f"<b>üî• –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏ #{vuln_index+1} –Ω–∞ {html.escape(target)}</b>\n\n"
                    f"‚è≥ <i>{stages[current_stage]}{dots * '.'}</i>\n\n"
                    f"<b>‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è",
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏: {e}")
            
            await asyncio.sleep(2)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def perform_exploitation():
        nonlocal exploit_results, exploit_complete
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            scanner = ServiceScanner(target)
            scan_results = scanner.scan_and_analyze()
            
            if "error" in scan_results:
                exploit_results = {"error": scan_results["error"]}
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            vulns = scan_results.get("vulnerabilities", [])
            if not vulns:
                exploit_results = {"error": "–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            if vuln_index >= len(vulns):
                exploit_results = {"error": f"–£—è–∑–≤–∏–º–æ—Å—Ç—å —Å –Ω–æ–º–µ—Ä–æ–º {vuln_index+1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(vulns)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π."}
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å
            vuln = vulns[vuln_index]
            
            # –ò—â–µ–º —ç–∫—Å–ø–ª–æ–π—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            if vuln.get("cve"):
                exploits = scanner.search_exploits([vuln])
                if exploits:
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏)
                    time.sleep(5)  # –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–ª–≥–æ–π —Ä–∞–±–æ—Ç—ã
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
                    exploit_results = {
                        "success": True,
                        "vuln": vuln,
                        "exploit": exploits[0],
                        "result": f"–£—è–∑–≤–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É {vuln['service']} –Ω–∞ –ø–æ—Ä—Ç—É {vuln['port']}."
                    }
                else:
                    exploit_results = {
                        "success": False,
                        "vuln": vuln,
                        "error": "–î–ª—è –¥–∞–Ω–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"
                    }
            else:
                exploit_results = {
                    "success": False,
                    "vuln": vuln,
                    "error": "–î–ª—è –¥–∞–Ω–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ CVE, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞"
                }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏: {e}")
            exploit_results = {"error": str(e)}
        finally:
            exploit_complete = True
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_task = asyncio.create_task(update_progress_message())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        exploit_thread = threading.Thread(target=perform_exploitation)
        exploit_thread.daemon = True
        exploit_thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞ (5 –º–∏–Ω—É—Ç)
        timeout = 5 * 60  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        start_time = time.time()
        
        while not exploit_complete and time.time() - start_time < timeout:
            await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É
        if not exploit_complete:
            logger.warning(f"–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –¥–ª—è {target} –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
            exploit_complete = True
            exploit_results = {"error": "–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É (5 –º–∏–Ω—É—Ç)"}
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_task.cancel()
        try:
            await progress_task
        except asyncio.CancelledError:
            pass
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if "error" in exploit_results:
            await message.edit_text(
                f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:</b>\n{exploit_results['error']}",
                parse_mode='HTML'
            )
        elif exploit_results.get("success"):
            vuln = exploit_results["vuln"]
            result_text = (
                f"<b>‚úÖ –£—Å–ø–µ—à–Ω–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏!</b>\n\n"
                f"<b>–°–µ—Ä–≤–∏—Å:</b> {vuln['service']} (–ø–æ—Ä—Ç {vuln['port']})\n"
                f"<b>–£—è–∑–≤–∏–º–æ—Å—Ç—å:</b> {vuln['script_id']}\n"
            )
            
            if vuln.get("cve"):
                result_text += f"<b>CVE:</b> {vuln['cve']}\n"
            
            result_text += f"\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {exploit_results['result']}\n\n"
            
            if "exploit" in exploit_results:
                exploit = exploit_results["exploit"]
                result_text += f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–ª–æ–π—Ç:</b> <a href='{exploit['url']}'>Exploit DB</a>\n"
            
            await message.edit_text(result_text, parse_mode='HTML')
        else:
            vuln = exploit_results["vuln"]
            error = exploit_results.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            
            result_text = (
                f"<b>‚ö†Ô∏è –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å</b>\n\n"
                f"<b>–°–µ—Ä–≤–∏—Å:</b> {vuln['service']} (–ø–æ—Ä—Ç {vuln['port']})\n"
                f"<b>–£—è–∑–≤–∏–º–æ—Å—Ç—å:</b> {vuln['script_id']}\n"
            )
            
            if vuln.get("cve"):
                result_text += f"<b>CVE:</b> {vuln['cve']}\n"
            
            result_text += f"\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error}\n"
            
            await message.edit_text(result_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}")
        exploit_complete = True

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle unknown commands."""
    user = update.effective_user
    command = update.message.text
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {command}")
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

async def run_bot_async():
    """Runs the bot asynchronously using Application (v20+ API)"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram")
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥")
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("scan", scan_command))
        application.add_handler(CommandHandler("exp", exploit_command))
        application.add_handler(CommandHandler("crawl", crawl_command))
        application.add_handler(CommandHandler("target_info", target_info_command))
        application.add_handler(CommandHandler("brute", brute_command))
        application.add_handler(CommandHandler("vuln", vuln_command))
        application.add_handler(CommandHandler("exploit_vuln", exploit_vuln_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        application.add_handler(MessageHandler(filters.COMMAND, unknown))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ run_polling, –∫–æ—Ç–æ—Ä–∞—è –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        # –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ run_polling")
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
        
        # –ú—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–π —Ç–æ—á–∫–∏, —Ç.–∫. run_polling –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_bot_async: {e}")
        logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
        raise

def run_bot():
    """Starts the Telegram bot using Application (v20+ API)."""
    if TELEGRAM_BOT_TOKEN == 'YOUR_TELEGRAM_BOT_TOKEN' or not TELEGRAM_BOT_TOKEN:
        logger.critical("Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        logger.critical("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –≤ bot/bot.py –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        return

    try:
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —Å asyncio.run() –≤–º–µ—Å—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
        asyncio.run(run_bot_async())
    except Exception as e:
        logger.critical(f"–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞: {e}")
        logger.critical(f"—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
        
        # –ø–∏—à–µ–º –æ—à–∏–±–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è
        error_time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        with open(f"bot_error_{error_time}.log", "w") as error_file:
            error_file.write(f"–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n")
            error_file.write(f"—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}")
        
        print(f"\n\n–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print(f"–ª–æ–≥ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∞–Ω –≤ bot_error_{error_time}.log")
        raise

if __name__ == '__main__':
    run_bot() 